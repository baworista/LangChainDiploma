"""
Module for generating comprehensive executive reports based on team reviews.

This module uses a language model to create structured, actionable reports by summarizing
diagnoses and recommendations. The report includes an executive summary, introduction,
detailed analysis, and recommendations.

Modules Used:
    - dotenv: For loading environment variables.
    - langchain_openai: For interacting with OpenAI's language model.
    - langchain_core.messages: For managing system messages.
    - os: For accessing environment variables.
    - graphSupervisor.states: For defining the `OverallState`.

Functions:
    - report_writer_node: Generates a comprehensive report based on the state information.

Constants:
    - writing_instructions: Template for generating the report using the language model.
"""

from dotenv import load_dotenv
from langchain_openai import ChatOpenAI
from langchain_core.messages import SystemMessage
import os
from graphSupervisor.states import OverallState


load_dotenv()

llm = ChatOpenAI(model_name=os.getenv("MODEL"))

writing_instructions = """You are a senior consultant experienced in writing executive reports. Your goal is to write a comprehensive report based on the reviews provided by the analyst-reviewer teams.

The report should be structured, concise, and actionable. It should include an executive summary, an introduction, a detailed analysis, and a set of recommendations.

Here are the topic of task: {topic}

Here are the questionnaire: {questionnaire}

Here are reviews from teams: {reviews}.

Write a report from provided.
"""


def report_writer_node(state: OverallState):
    """
    Generate a comprehensive report based on the provided state.

    This function collects the topic, questionnaire, and reviews from the `OverallState`
    and uses a language model to create a structured executive report. The generated report
    is added to the state as `final_report`.

    Args:
        state (OverallState): The current state object containing:
            - "topic" (str): The topic of the task.
            - "questionnaire" (str): The questionnaire data provided by the user.
            - "reviews" (list): A list of reviews generated by the analyst-reviewer teams.

    Returns:
        OverallState: Updates the state with the generated report under the key "final_report".
    """
    print("... Write Report ...")
    # Get state
    topic = state["topic"]
    questionnaire = state["questionnaire"]
    reviews = state["reviews"]

    # Generate question
    system_message = writing_instructions.format(topic=topic, questionnaire=questionnaire, reviews=reviews)
    report = llm.invoke([SystemMessage(content=system_message)])

    # Write messages to state
    return {"final_report": report}
