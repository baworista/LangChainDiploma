"""
Module: multi_agent_state_graph.

This module constructs and executes a multi-agent state graph for organizational analysis using the `langgraph` library. 
Agents analyze specific aspects of a given task and collaborate to produce a comprehensive summary report. 
The system integrates data from questionnaires, best practices, and user inputs to generate actionable insights.

Key Features:
    - Load data (e.g., questionnaires, best practices) from JSON files.
    - Build a state graph connecting agents and defining workflows.
    - Visualize the state graph in PNG format.
    - Execute the graph with user inputs and generate a final report.

Modules and Classes Used:
    - `langgraph.constants`: Provides constants like `START` and `END` for graph edges.
    - `langgraph.graph`: Core library for creating and managing state graphs.
    - `graphNetwork.nodes.agent_nodes`: Contains definitions of individual agent nodes.
    - `graphNetwork.nodes.report_writer_node`: Handles generation of the final report.
    - `graphNetwork.states`: Defines the `OverallState` class for managing the workflow state.

Constants:
    - `DATA_PATH`: Path to the directory containing JSON data files.

Functions:
    - load_json: Utility function to load JSON data from a file.

Workflow:
    1. Start with the `Consulting_Agent` node.
    2. Pass through domain-specific agents (`HR_Agent`, `BP_Agent`, `KM_Agent`, `IT_Agent`).
    3. Conclude with the `Summary_Agent` node, which generates the final report.

Outputs:
    - `network_graph_diagram.png`: A Mermaid.js visualization of the state graph.
    - `outputNetwork.md`: The final report generated by the `Summary_Agent`.

Example Usage:
    # Load data
    questionnaire = load_json("answer_1.json")
    good_practices = load_json("good_practices.json")

    # Build and execute the graph
    user_input = {
        "main_task": "Improve product management maturity for a multinational company.",
        "questionnaire": questionnaire,
        "good_practices": good_practices,
         }
    response = graphNetwork.invoke(user_input, thread)

    # Save the final report
    if "final_report" in response:
        with open("outputNetwork.md", "w", encoding="utf-8") as file:
            file.write(response["final_report"].content)
"""

import json
from langgraph.constants import END, START
from langgraph.graph import StateGraph
from graphNetwork.nodes.agent_nodes import *
from graphNetwork.nodes.report_writer_node import report_writer_node
from graphNetwork.states import OverallState

DATA_PATH = "../data/"

def load_json(filename):
    """
    Load JSON data from the specified file.

    Args:
        filename (str): The name of the JSON file to load.

    Returns:
        dict or list: The parsed JSON data.

    Raises:
        FileNotFoundError: If the file does not exist.
        json.JSONDecodeError: If the file contains invalid JSON.
    """
    with open(f"{DATA_PATH}{filename}", 'r', encoding='utf-8') as f:
        return json.load(f)

questionnaire = load_json("answer_1.json")
good_practices = load_json("good_practices.json")

# Build the state graph
builder = StateGraph(OverallState)
builder.add_node("Consulting_Agent", Consulting_Agent)

builder.add_node("HR_Agent", HR_Agent)
builder.add_node("BP_Agent", BP_Agent)
builder.add_node("KM_Agent", KM_Agent)
builder.add_node("IT_Agent", IT_Agent)

builder.add_node("Summary_Agent", report_writer_node)

builder.add_edge(START, "Consulting_Agent")
builder.add_edge("Summary_Agent", END)
graphNetwork = builder.compile()

graph_image = graphNetwork.get_graph(xray=1).draw_mermaid_png()
with open("network_graph_diagram.png", "wb") as file:
    file.write(graph_image)
print("Saved as PNG 'network_graph_diagram.png'")

# Thread configuration and graph input
thread = {"configurable": {"thread_id": "1"}}

# Load from file
with open("../data/answer_1.json", "r") as file:
    data = json.load(file)

# Load from file
with open("../data/good_practices.json", "r") as file:
    gp = json.load(file)

user_input = {
    "main_task": "Help a multinational manufacturing company in their journey to product management maturity.",
    "questionnaire" : data,
    "good_practices": gp
}

response = graphNetwork.invoke(user_input, thread)

# Assuming the response is already generated
final_report = response.get("final_report")

if final_report:
    # Extract content from the final report
    report_content = final_report.content

    # Define the output file path
    output_file_path = "outputNetwork.md"

    # Write the report content to the outputNetwork.md file
    with open(output_file_path, "w", encoding="utf-8") as output_file:
        output_file.write(report_content)

    print(f"Final report has been written to {output_file_path}")
else:
    print("Final report is missing.")





