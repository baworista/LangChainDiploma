"""
Module defining state models and utility functions for managing hierarchical workflows.

This module includes definitions for individual, subordinate, and overall states in a hierarchical team structure.
It also provides utility functions for merging and deduplicating data.

Classes:
    - ResearchState: Represents the state of a research team (analyst and reviewer).
    - SubordinateState: Represents the state of a subordinate team and its associated tasks.
    - OverallState: Represents the overall state managed by the supervisor.

Functions:
    - deduplicate_merge: Merges two lists of strings, removing duplicates.
    - merge_str: Ensures only the latest string is returned, useful for single-value merges.

Annotations:
    - Annotated: Used for specifying custom merge or combination behaviors for fields.
"""

import operator
from typing import Annotated, List, TypedDict
from langgraph.graph import MessagesState

from graphHierarchicalTeams.schema import Person, ResearchTeam, SubordinateTeam


# Individual state for each analyst and reviewer team
class ResearchState(MessagesState):
    """
    Represents the state of a research team, which includes an analyst and a reviewer.

    Attributes:
        team_name (str): The name of the research team.
        team_topic (str): The topic assigned to the team.
        description (str): A description of the team's responsibilities and capabilities.
        team_questionnaire (str): The questionnaire results or user input for the team.
        reviews (List[str]): A list of reviews generated by four reviewers.
        analyst (Person): Information about the analyst in the team.
        reviewer (Person): Information about the reviewer in the team.
    """
    team_name: str
    team_topic: str
    description: str  # Description of team's responsibility and capabilities
    team_questionnaire: str # Questionnaire results or user input
    reviews: Annotated[List[str], operator.add]  # Four reviewers answers
    analyst: Person  # Their info
    reviewer: Person


def deduplicate_merge(old_reviews: List[str], new_reviews: List[str]) -> List[str]:
    """
    Merges two lists of strings, removing duplicates.

    Args:
        old_reviews (List[str]): The existing list of reviews.
        new_reviews (List[str]): The new list of reviews to merge.

    Returns:
        List[str]: A merged list with duplicates removed.
    """
    return list(set(old_reviews).union(new_reviews))


def merge_str(old_str: str, new_str: str) -> str:
    """
    Ensures that only the latest string is returned.

    This is useful for merging single-value fields where only the most recent value matters. 

    Args:
        old_str (str): The existing string.
        new_str (str): The new string to use.

    Returns:
        str: The new string.
    """
    return new_str


class SubordinateState(TypedDict):
    subordinate_team_name: str
    topic: str
    questionnaire: str # Questionnaire results or user input
    subordinate: Person
    teams: List[ResearchTeam]
    reviews: Annotated[List[str], deduplicate_merge]  # Four teams analysis
    final_subordinate_report: str  # Final report generated after all analysts complete their tasks
    subordinate_reviews: Annotated[List[str], operator.add]  # Two subordinate supervisors answers


# Overall state for the supervisor
class OverallState(TypedDict):
    topic: Annotated[str, merge_str]  # Overall topic of analysis
    questionnaire: Annotated[str, merge_str]  # Questionnaire results or user input
    subordinate_reviews: Annotated[List[str], deduplicate_merge]  # Two subordinate supervisors answers
    final_report: str  # Final report generated after all analysts complete their tasks
    subordinate_teams: List[SubordinateTeam]  # List of subordinate supervisors